<?php
require_once 'Zend/Controller/Action.php';
require_once 'Zend/View.php';
require_once 'Zend/Mail.php';
require_once 'ApplicationController.php';
require_once 'Swaplady/Log.php';
require_once 'PaypalEwp.php';
require_once 'Transaction.php';
require_once 'LineItem.php';

/**
 * Transactions Controller
 * Handle creating, updating, and reviewing all transactions
 */
class TransactionsController extends ApplicationController
{
    public function preDispatch()
    {
        $this->filterActions('ensureLoggedIn',
            array('new', 'create'));
    }

    public function newAction()
    {
        $this->logger->entering();

        $this->logger->info('Loading user');
        $users = new User();
        $user = $users->find($this->session->user_id)->current();
        
        $this->logger->info('Finding line items of the user');
        $lineItemTable = new LineItem();        
        
        $where = $this->db->quoteInto('user_id = ?', $user->id);
        $lineItems = $lineItemTable->fetchAll($where);
        $items = array();
        $swapbucksTotal = 0;
        $transactionTotal = 0;
        foreach($lineItems as $lineItem) {
        	$item = $lineItem->findParentRow('Item');
        	
        	if (1 == $lineItem->shipping) {
				$shippingCharge = Item::shippingCharge($item->weight);
        	} else {
				$shippingCharge = 0;
        	}
        	
        	$items[$item->name] = array(
        		'quantity'        => 1,
        		'transFee'        => 1,
        		'item_id'         => $item->id,
        		'title'           => $item->name,
        		'price'           => $item->points,
        		'line_item_id'    => $lineItem->id,
        		'user_id'         => $lineItem->user_id,
        		'shipping_method' => $lineItem->shipping,
        		'shipping_charge' => $shippingCharge,
        		'total'           => $item->points + $shippingCharge
        	);
        	
        	$swapbucksTotal += $items[$item->name]['total'];
        	$transactionTotal += $items[$item->name]['transFee'];
        }
        
        $this->logger->info('Determine swapbucks to be bought');
        $swapbucksToBuy = null;
        if ($swapbucksTotal > $user->balance) {
            $swapbucksToBuy = $swapbucksTotal - $user->balance;
            $items['Swapbucks'] = array(
                'title'           => 'Swapbucks',
                'quantity'        => $swapbucksToBuy,
                'price'           => 0,
                'shipping_charge' => 0,
                'total'           => 0,
                'transFee'        => $swapbucksToBuy
            );
            $transactionTotal += $swapbucksToBuy;
            $finalBalance = 0;
        } else {
            $finalBalance = $user->balance - $swapbucksTotal;
        }
        
        $paypalParams = array(
            'cmd'           => '_xclick',
            'business'      => 'swaplady@swaplady.com',
            'return'        => 'http://swaplady.com/transactions/create',
            'cancel_return' => 'http://swaplady.com/',
            'currency_code' => 'USD',
            'item_name'     => 'Swaplady',
            'amount'        => $transactionTotal,
            'no_shipping'   => '1'
        );

        $paypal = new PayPalEWP();
        $paypal->setTempFileDirectory('../tmp');                                  //path to temp file
        $paypal->setCertificate('../config/pubcert.pem', '../config/prvkey.pem'); //path to your public certificate, private key
        $paypal->setCertificateID('KF4WJNF89QEN6');                               //certificate id generated by PayPal when you uploaded your public certificate to your PayPal account
        $paypal->setPayPalCertificate('../config/sandbox_pubcert.pem');            //PayPal public certificate
        $encryptedButton = $paypal->encryptButton($paypalParams);
        
        $this->logger->info('Populating the View');
        $this->view->assign(array(
            'title'            => 'Shopping Bag',
            'user'             => $user,
            'swapbucksTotal'   => $swapbucksTotal,
            'transactionTotal' => $transactionTotal,
            'swapbucksToBuy'   => $swapbucksToBuy,
            'finalBalance'     => $finalBalance,
            'items'            => $items,
            'paypalParams'     => $paypalParams,
            'encryptedButton'  => $encryptedButton
        ));
        
        $this->render();
        
        $this->logger->exiting();
    }
    
    public function createAction()
    {
        $this->logger->entering();
        
        $this->logger->info('Handle Instant Payment');
        
        $this->logger->info('Find user from session');
        $users = new User();
        $user = $users->find($this->session->user_id)->current();
        
        $this->logger->info('Notify sellers of swap');        
/*
        $items = LineItem::findItems($user->id);
        foreach ($items as $item) {
            $seller = $users->find($item->owner_id)->current();
            
            $mail = new Zend_Mail();
            $mail->setBodyText("Your item, {$item->name} has been swapped to {$user->username}. Please send it to:\n{$user->address}\n{$user->city}, {$user->state} {$user->zipcode}");
            $mail->setFrom('somebody@example.com', 'Some Sender');
            $mail->addTo($seller->email, $seller->name);
            $mail->setSubject('Your item has been swapped');
            $mail->send();
        }
*/
        
        $lineItems = $user->findLineItem();
        foreach ($lineItems as $lineItem) {
        	$item = $lineItem->findParentItem();
			$seller = $item->findParentUser();
        	if (0 == $lineItem->shipping) {
        		
				$mail = new Zend_Mail();
				$mail->setBodyText("Your item, {$item->name} has been swapped to {$user->username}<{$user->email}>. They will be coming to pick it up.");
				$mail->setFrom('swaplady@swaplady.com', 'Swaplady');
				$mail->addTo($seller->email, $seller->name);
				$mail->setSubject('[Swaplady]Your item has been swapped');
				$mail->send();
				
				$mail = new Zend_Mail();
				$mail->setBodyText("{$item->name} has been swapped from {$seller->username}<{$seller->email}>. Please pick it at:\n{$seller->address}\n{$seller->city}, {$seller->state} {$seller->zip_code}");
				$mail->setFrom('swaplady@swaplady.com', 'Swaplady');
				$mail->addTo($user->email, $user->name);
				$mail->setSubject('[Swaplady]Your swapped for an item');
				$mail->send();
        	} else {				
				$mail = new Zend_Mail();
				$mail->setBodyText("Your item, {$item->name} has been swapped to {$user->username}<{$user->email}>. Please send it to:\n{$user->address}\n{$user->city}, {$user->state} {$user->zip_code}");
				$mail->setFrom('somebody@example.com', 'Some Sender');
				$mail->addTo($seller->email, $seller->name);
				$mail->setSubject('[Swaplady]Your item has been swapped');
				$mail->send();
				
				
				$mail = new Zend_Mail();
				$mail->setBodyText("{$item->name} has been swapped from {$seller->username}<{$seller->email}>. They will be shipping it soon.");
				$mail->setFrom('swaplady@swaplady.com', 'Swaplady');
				$mail->addTo($user->email, $user->name);
				$mail->setSubject('[Swaplady]Your swapped for an item');
				$mail->send();
        	}
        }
        
        $this->logger->notice('Swap the user cart contents');
        $transactions = new Transaction();
        $transactions->swapCart($user);
        
        $this->logger->info('Redirect to index');
        $this->_redirect('/');

        $this->logger->exiting();
    }

    public function showAction()
    {
        $this->logger->entering();

        $this->logger->info('Loading user from params');
        $users = new User();
        $user = $users->find($this->_getParam('id'))->current();
        
        $this->logger->info('Load all transactions by user');
        $transactionTable = new Transaction();
        $trasactions = $transactionTable->fetchAllByUser($user);

        $this->logger->info('Load the view parameters');
        $this->view->assign(array(
            'template'     => 'transactionShow.phtml',
            'title'        => 'Showing transactions by ' . $user->username,
            'user'         => $user,
            'transactions' => $transactions
        ));

        $this->logger->info('Render application template');
        echo $this->render('applicationTemplate.phtml');
    }
}
